package uz.ciasev.ubdd_service.mvd_core.api.court.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Profile;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;
import uz.ciasev.ubdd_service.service.file.FileService;
import uz.ciasev.ubdd_service.service.pdf.PdfFile;
import uz.ciasev.ubdd_service.service.pdf.PdfService;
import uz.ciasev.ubdd_service.utils.ContentType;
import uz.ciasev.ubdd_service.utils.ControllerUtils;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;

@RestController
@RequestMapping(path = "${external-systems.url-v0}/files")
@Profile("emi-api")
@RequiredArgsConstructor
public class CourtExternalApiFileController {

    private final FileService fileService;
    private final PdfService pdfService;

    @GetMapping("/**")
    public ResponseEntity<byte[]> get(HttpServletRequest request) throws IOException {
        String path = request.getRequestURL().toString().replaceFirst(".*/files/", "");

        byte[] fileContent = fileService
                .get(path)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));

        return ControllerUtils.buildFileResponse(
                fileContent,
                fileService.extractFileNameFromPath(path)
        );

//        ControllerUtils.writeFileToResponse(fileContent, response);
    }

    @GetMapping(path = "/autogenerated/pdf/decision/{id}")
    public ResponseEntity<byte[]> decision(@PathVariable("id") Long id) throws IOException {
        PdfFile document = pdfService.getDecision(id, null);
        return ControllerUtils.buildFileResponse(
                document.getContent(),
                ContentType.PDF,
                document.getFileName()
        );
    }

    @GetMapping(path = "/autogenerated/pdf/protocol/{id}")
    public ResponseEntity<byte[]> protocol(@PathVariable("id") Long id) throws IOException {
        PdfFile pdf = pdfService.getProtocol(id);
        return ControllerUtils.buildFileResponse(
                pdf.getContent(),
                ContentType.PDF,
                pdf.getFileName()
        );
    }

    @GetMapping(path = "/autogenerated/pdf/invoice/{id}")
    public ResponseEntity<byte[]> invoice(@PathVariable("id") Long invoiceId) throws IOException {
        PdfFile pdf = pdfService.getInvoiceForCourt(invoiceId);
        return ControllerUtils.buildFileResponse(
                pdf.getContent(),
                ContentType.PDF,
                pdf.getFileName()
        );
    }

    @GetMapping(path = "/autogenerated/pdf/person-card/{violatorDetailId}")
    public ResponseEntity<byte[]> personCard(@PathVariable("violatorDetailId") Long violatorDetailId) throws IOException {
        PdfFile pdf = pdfService.getPersonCard(violatorDetailId);
        return ControllerUtils.buildFileResponse(
                pdf.getContent(),
                ContentType.PDF,
                pdf.getFileName()
        );
    }
}
