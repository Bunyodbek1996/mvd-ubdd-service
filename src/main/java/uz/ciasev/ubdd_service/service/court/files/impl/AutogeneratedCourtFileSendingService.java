package uz.ciasev.ubdd_service.service.court.files;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Service;
import uz.ciasev.ubdd_service.mvd_core.api.court.dto.first.FirstCourtFileRequestDTO;
import uz.ciasev.ubdd_service.entity.dict.DocumentType;
import uz.ciasev.ubdd_service.entity.document.CourtDocumentProjection;
import uz.ciasev.ubdd_service.entity.dict.DocumentTypeAlias;
import uz.ciasev.ubdd_service.entity.dict.FileFormatAlias;
import uz.ciasev.ubdd_service.entity.invoice.Invoice;
import uz.ciasev.ubdd_service.entity.protocol.ProtocolCourtAutogeneratedPdfProjection;
import uz.ciasev.ubdd_service.repository.document.DocumentRepository;
import uz.ciasev.ubdd_service.repository.protocol.ProtocolRepository;
import uz.ciasev.ubdd_service.repository.resolution.decision.DecisionRepository;
import uz.ciasev.ubdd_service.service.dict.AliasedDictionaryService;
import uz.ciasev.ubdd_service.service.file.FileFormatService;
import uz.ciasev.ubdd_service.entity.resolution.decision.DecisionCourtAutogeneratedPdfProjection;

import java.util.ArrayList;
import java.util.EnumMap;
import java.util.List;
import java.util.stream.Collectors;

@Primary
@Slf4j
@Service
@RequiredArgsConstructor
public class AutogeneratedCourtFileSendingService implements CourtFileSendingService {

    private final AliasedDictionaryService<DocumentType, DocumentTypeAlias> documentTypeService;
    private final FileFormatService fileFormatService;
    private final DocumentRepository documentRepository;
    private final ProtocolRepository protocolRepository;
    private final DecisionRepository decisionRepository;
    private final CourtGeneratedFileUriBuilder uriBuilder;
    private final EnumMap<FileFormatAlias, String> fileFormatCache = new EnumMap<FileFormatAlias, String>(FileFormatAlias.class);
    private final EnumMap<DocumentTypeAlias, Long> documentTypeCache = new EnumMap<DocumentTypeAlias, Long>(DocumentTypeAlias.class);


    @Override
    public List<FirstCourtFileRequestDTO> buildFiles(Long admCaseId) {
        List<FirstCourtFileRequestDTO> result = new ArrayList<>();

        result.addAll(getAutogeneratedFiles(admCaseId));

        result.addAll(buildSavedFiles(admCaseId));

        return result;
    }

    @Override
    public String buildInvoicePath(Invoice invoice) {
        return uriBuilder.getUriForInvoice(invoice);
    }

    private List<FirstCourtFileRequestDTO> getAutogeneratedFiles(Long admCaseId) {
        List<FirstCourtFileRequestDTO> result = new ArrayList<>();

        List<ProtocolCourtAutogeneratedPdfProjection> protocols = protocolRepository.findAllPdfFileProjectionByAdmCaseId(admCaseId);
        for (ProtocolCourtAutogeneratedPdfProjection protocol : protocols) {
            result.add(buildProtocolPdfFile(protocol));
            if (protocol.getIsMain()) {
                result.add(buildPersonCardPdfFile(protocol));
            }
        }

        List<DecisionCourtAutogeneratedPdfProjection> decisions = decisionRepository.findActiveByAdmCaseId(admCaseId);
        for (DecisionCourtAutogeneratedPdfProjection decision : decisions) {
            result.add(buildDecisionPdfFile(decision));
        }

        return result;
    }

    private FirstCourtFileRequestDTO buildProtocolPdfFile(ProtocolCourtAutogeneratedPdfProjection protocol) {
        FirstCourtFileRequestDTO dto = new FirstCourtFileRequestDTO();

        dto.setFileId(protocol.getId());
        dto.setFileUri(uriBuilder.getUriForProtocol(protocol.getId()));
        dto.setFileType(getFileFormatCodeForAlias(FileFormatAlias.PDF));
        dto.setFileName(protocol.getViolatorFIO());
        dto.setDocumentTypeId(getDocumentTypeIdForAlias(DocumentTypeAlias.PROTOCOl));

        return dto;
    }

    private FirstCourtFileRequestDTO buildPersonCardPdfFile(ProtocolCourtAutogeneratedPdfProjection protocol) {
        FirstCourtFileRequestDTO dto = new FirstCourtFileRequestDTO();

        dto.setFileId(protocol.getViolatorDetailId());
        dto.setFileUri(uriBuilder.getUriForPersonCard(protocol.getViolatorDetailId()));
        dto.setFileType(getFileFormatCodeForAlias(FileFormatAlias.PDF));
        dto.setFileName(protocol.getViolatorFIO());
        dto.setDocumentTypeId(getDocumentTypeIdForAlias(DocumentTypeAlias.PERSON_CARD));

        return dto;
    }

    private FirstCourtFileRequestDTO buildDecisionPdfFile(DecisionCourtAutogeneratedPdfProjection decision) {
        FirstCourtFileRequestDTO dto = new FirstCourtFileRequestDTO();

        dto.setFileId(decision.getId());
        dto.setFileUri(uriBuilder.getUriForDecision(decision.getId()));
        dto.setFileType(getFileFormatCodeForAlias(FileFormatAlias.PDF));
        dto.setFileName(decision.getViolatorFIO());
        dto.setDocumentTypeId(getDocumentTypeIdForAlias(DocumentTypeAlias.DECISION));

        return dto;
    }

    private List<FirstCourtFileRequestDTO> buildSavedFiles(Long admCaseId) {
        List<CourtDocumentProjection> documents = documentRepository.findNotGeneratedCourtProjectionByAdmCaseId(admCaseId);
        return documents.stream()
                .map(document -> {
                    FirstCourtFileRequestDTO file = new FirstCourtFileRequestDTO();
                    file.setFileId(document.getId());
                    file.setFileUri(document.getUrl());
                    file.setFileName(document.getPersonFIO());
                    file.setFileType(document.getFailFormatCode());
                    file.setDocumentTypeId(document.getDocumentTypeId());
                    return file;
                })
                .collect(Collectors.toList());
    }

    private Long getDocumentTypeIdForAlias(DocumentTypeAlias alias) {
        if (!documentTypeCache.containsKey(alias)) {
            documentTypeCache.put(
                    alias,
                    documentTypeService.getByAlias(alias).getId()
            );
        }

        return documentTypeCache.get(alias);
    }

    private String getFileFormatCodeForAlias(FileFormatAlias alias) {
        if (!fileFormatCache.containsKey(alias)) {
            fileFormatCache.put(
                    alias,
                    fileFormatService.findByExtension(alias.name()).getCode()
            );
        }

        return fileFormatCache.get(alias);
    }
}
